{
  "contractName": "BoboSwapTester",
  "abi": [],
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/test/BoboSwapTester.sol\":\"BoboSwapTester\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ded47ec7c96750f9bd04bbbc84f659992d4ba901cb7b532a52cd468272cf378f\",\"dweb:/ipfs/QmfBrGtQP7rZEqEg6Wz6jh2N2Kukpj1z5v3CGWmAqrzm96\"]},\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xf7c39c7e6d06ed3bda90cfefbcbf2ddc32c599c3d6721746546ad64946efccaa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cb57a28e189cd8b05748db44bdd51d608e6f1364dd1b35ad921e1bc82c10631e\",\"dweb:/ipfs/QmaWWTBbVu2pRR9XUbE4iC159NoP59cRF9ZJwhf4ghFN9i\"]},\"@openzeppelin/contracts/introspection/ERC165.sol\":{\"keccak256\":\"0xd6b90e604fb2eb2d641c7110c72440bf2dc999ec6ab8ff60f200e71ca75d1d90\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7b92d8ab83b21ff984b1f0d6d66897d5afb1f2052004cbcb133cea023e0ae468\",\"dweb:/ipfs/QmTarypkQrFp4UMjTh7Zzhz2nZLz5uPS4nJQtHDEuwBVe6\"]},\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"keccak256\":\"0xf70bc25d981e4ec9673a995ad2995d5d493ea188d3d8f388bba9c227ce09fb82\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd970f51e3a77790c2f02b5b1759827c3b897c3d98c407b3631e8af32e3dc93c\",\"dweb:/ipfs/QmPF85Amgbqjk3SNZKsPCsqCw8JfwYEPMnnhvMJUyX58je\"]},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"keccak256\":\"0x3b21f2c8d626de3b9925ae33e972d8bf5c8b1bffb3f4ee94daeed7d0679036e6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7f8d45329fecbf0836ad7543330c3ecd0f8d0ffa42d4016278c3eb2215fdcdfe\",\"dweb:/ipfs/QmXWLT7GcnHtA5NiD6MFi2CV3EWJY4wv5mLNnypqYDrxL3\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xcbd85c86627a47fd939f1f4ee3ba626575ff2a182e1804b29f5136394449b538\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://53c6a80c519bb9356aad28efa9a1ec31603860eb759d2dc57f545fcae1dd1aca\",\"dweb:/ipfs/QmfRS6TtMNUHhvgLHXK21qKNnpn2S7g2Yd1fKaHKyFiJsR\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://24427744bd3e6cb73c17010119af12a318289c0253a4d9acb8576c9fb3797b08\",\"dweb:/ipfs/QmTLDqpKRBuxGxRAmjgXt9AkXyACW3MtKzi7PYjm5iMfGC\"]},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3a849c2d95e85463909e5b5c920b13e7a11216ca14127085e16d22b9379d52a\",\"dweb:/ipfs/QmUg3CZDbCCcQdroEpexBy5ZFd5vD1UWijWQq9qHZjtJNQ\"]},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"keccak256\":\"0xe45324a792c53f7b6675bfb61568e078d5fe47da4724de6737e5f107123c0d85\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c0f1cafe650094369a1081cf9a38cee50f231be8672922c13f52f11bc54e75f7\",\"dweb:/ipfs/QmejsQnRvbghkPpRgXAHfMzBiJuxmXCWyMz2UBBgAf6PL8\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5a9f5c29bd7cf0b345e14d97d5f685f68c07e1e5bfdd47e5bcec045e81b0b6ac\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://321cbaa1412fc8d013d8ad3fb5f98c0db7401ddacfb09b70828ea2cebe37397e\",\"dweb:/ipfs/Qmd3Hoc71w6rmxAR6A5VKW9at677VP1L5KDcJnyvu4ksu3\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\":{\"keccak256\":\"0xe6bd1b1218338b6f9fe17776f48623b4ac3d8a40405f74a44bc23c00abe2ca13\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0c354c3f6e9c487759aa7869be4fba68e0b2efc777b514d289c4cbd3ff8f7e1a\",\"dweb:/ipfs/QmdF9LcSYVmiUCL7JxLEYmSLrjga6zJsujfi6sgEJD4M1z\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\":{\"keccak256\":\"0xccb917776f826ac6b68bd5a15a5f711e3967848a52ba11e6104d9a4f593314a7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://430255ad2229ced6d880e61a67bdc6e48dbbaed8354a7c1fe918cd8b8714a886\",\"dweb:/ipfs/QmTHY56odzqEpEC6v6tafaWMYY7vmULw25q5XHJLCCAeox\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0x52146049d6709c870e8ddcd988b5155cb6c5d640cfcd8978aee52bc1ba2ec4eb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ada84513617b7c1b2f890b44503735abaec73a1acd030112a17aac7e6c66a4a1\",\"dweb:/ipfs/QmaiFwdio67iJrfjAdkMac24eJ5sS1qD7CZW6PhUU6KjiK\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xa6a15ddddcbf29d2922a1e0d4151b5d2d33da24b93cc9ebc12390e0d855532f8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7c119bcaecfa853d564ac88d312777f75fa1126a3bca88a3371adb0ad9f35cb0\",\"dweb:/ipfs/QmY9UPuXeSKq86Zh38fE43VGQPhKMN34mkuFSFqPcr6nvZ\"]},\"@openzeppelin/contracts/utils/EnumerableMap.sol\":{\"keccak256\":\"0xf6bdf22fe038e5310b6f0372ecd01f221e2c0b248b45efc404542d94fcac9133\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e798f3492180627d6616fa94925b61a9f105347eed9e895f3e18a0eb3dfcd3d\",\"dweb:/ipfs/QmQcTro5nv3Lopf4c4rEe1BuykCfPsjRsJmysdNXtHNUdt\"]},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"keccak256\":\"0xae0992eb1ec30fd1ecdf2e04a6036decfc9797bf11dc1ec84b546b74318d5ec2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3b61f99a64e999682ad7bfbb3a1c762a20a0a5b30f9f2011693fa857969af61f\",\"dweb:/ipfs/QmZystFY76wkWCf7V3yKh3buZuKVKbswiE7y6yU62kk3zi\"]},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"keccak256\":\"0x065360ef3924db6b63c2160886b5de737497dd64a917e362dd8d857cda1f5ae2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://946fe57f3b935f0f4a41345b3eedb617c30912ba5e802bd6b430b394114048ab\",\"dweb:/ipfs/QmRVgUK6yHgqiVWoFn51aUGYejR8romW2ZqwVvSFMnhnJW\"]},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b95e56c1640d0ef789fc5c16269e141e992f6c8ac97cc6d377bd3825e9cab182\",\"dweb:/ipfs/QmVzaxJZY51EhagrcNnkxoU6Uq17RhATe7aHvtkC6wUkgK\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x16b5422892fbdd9648f12e59de85b42efd57d76b6d6b2358cb46e0f6d4a71aaf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ef38821a4ee756757dc1ce9074ef6096d1b5c760627e92c0852d788dc636ea7\",\"dweb:/ipfs/QmdGwP6BtRMcp4VVJUWwTmXEjYmL52A8WZpBdFJYmzc9pJ\"]},\"project:/contracts/BoboFactory.sol\":{\"keccak256\":\"0x8e8a45f183bb085791020ecd976d6e5133a6562bb677a6f0ab70ec3c3761e100\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8db6a48988e3154295d689bfedb8e2e9e2963a32c05b9ad1f030fb1922b091ae\",\"dweb:/ipfs/QmRJyLkbc2tz7kpxVMwrCj296ZFfTdrkRWfG6wp9vEUr8Z\"]},\"project:/contracts/BoboFarmer4HangingOrder.sol\":{\"keccak256\":\"0x9cc19e3f6cb2848fc8325587642aefc2ae20e20999223fcae3d6ecf915c37f8d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ef6c49c5957520b8b813908f38c086fa9bbf0c61d03656d60d24e879d3f2dd71\",\"dweb:/ipfs/QmQfVESXEyv2irkf2kmDePyLSCyPh5a7wkESvv6LFMnmqS\"]},\"project:/contracts/BoboPair.sol\":{\"keccak256\":\"0x8ef9712a5e6ebb40feaa9cd2540e4339dd8a910df5a907bbb2a84bc6cd89c297\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3ed3eb00c580a5fc98873f8914195ff8d4629a34fba39e6f82f73a4f14702c15\",\"dweb:/ipfs/QmcTHxrawRGMw4EdhEXv8eDBpZArsJgKfqANWcibt2e7hL\"]},\"project:/contracts/StratMaticSushi.sol\":{\"keccak256\":\"0x4dae469f1cfa37148b494a6be8ea0249515d236d23e39ddc2363021b17f8a229\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://677e2be1ba6de7c85d825c5c9e9250be7a89fac213f7c409050959f7ebea1724\",\"dweb:/ipfs/QmXWEx3nHWq2to76baeWYAw6zAtmTKAv2P9ZaPLEgVeWa7\"]},\"project:/contracts/SwapInterfaces.sol\":{\"keccak256\":\"0xc80917fb06d7d0c4eee82b69d7b52bbb25eebc9c6774cf2ec5d0f058a0a7b272\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3b699f016470e299f4f1d9e22980a3870e13e5b9315b5fc64c4c69497487e262\",\"dweb:/ipfs/QmV6wrttVpv5NdxCSDiSk4JeDoauX5B3zMCbvVeooycCgb\"]},\"project:/contracts/common/BasicStruct.sol\":{\"keccak256\":\"0x5d3e09e7826794359970a159f4e96a762050b3344e40d6a746b6cbc83befeff6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e94a5898782c71a129b08fd2e7fbbcf7393db5b14073612f121d1d9f155ed19c\",\"dweb:/ipfs/QmRWyaNczVTt3JxcnUaQ3TxQ1effLXs7fzerQiHxUW13sR\"]},\"project:/contracts/common/Minter.sol\":{\"keccak256\":\"0xb1fd4752db69897176e8e7bf663ccca40f0619a9271cfe1b8c62167054d9a988\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://36cd323626cdd1698fc39a00679e6e2dac7dc77a9d3ce885b1599af861e02b3b\",\"dweb:/ipfs/QmUbGJ9Fv2L5LhioXo62k2szCAsLWqsuPy8uLo1AYRuE4A\"]},\"project:/contracts/common/MixinAuthorizable.sol\":{\"keccak256\":\"0x184cb86c20cd3ffeeb9644c86116791f1012c0927b3f29826d37cc2b15d8bf0b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c521e3eb9589a595d082b21b6b92bf0ec337b4a0bc3740f528b9c213e384bd11\",\"dweb:/ipfs/QmSF8aBddSrii2DGyGKEokxK5KZhj26irvY62ZvVMHYcTg\"]},\"project:/contracts/common/OrderStore.sol\":{\"keccak256\":\"0xdeaaf9822639844406bb00686b71560fbf5cbd931a3966af400df896ffe3d8d0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b527f5e011e681ebda412c946e5f4abcfd999d5a4a6709ac88c720f3a4ea3bc7\",\"dweb:/ipfs/QmYXp1n28SZbynZLyZM4dUnJ1DNjKz4JdrKUdR7GLB2msB\"]},\"project:/contracts/common/StructuredLinkedList.sol\":{\"keccak256\":\"0x30c6ade423d142c2d6202705ffe99fe4edc2078e76449ae58556fa57333a5087\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://725917f85431270fec2f6b7e9bece1137ab0811b9d515a32f10ca1aecae9af31\",\"dweb:/ipfs/QmX5mXKWvXfTv96GPBWVAxBYs8YC12YMcH1GKfqEDoPPRW\"]},\"project:/contracts/common/orderNFT.sol\":{\"keccak256\":\"0x37a97f9addd4e0e8d21b29e48506158e684d329509f6388fd833c0290ab450cc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5ac77f5ea29820f9a10c1296184cdbf8857b24de5e9d9f34ba412c28f1cc3a2b\",\"dweb:/ipfs/Qmf3jba4UDYC7vkxxmcswhBmk7jN8JyiEfhQjMo3V1jnjA\"]},\"project:/contracts/test/BoboSwapTester.sol\":{\"keccak256\":\"0x7e4c00cbcfdf321afc95df23645a9d568019bc2b28b7602a9257117aa9a16594\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b1181198ddf65bd608596fc45db687aa45c97dd60e75aea5225d43f3d30de0a8\",\"dweb:/ipfs/QmcK85Gv4Xfb6nb5dCcJdFdUpcHeuoktae2Q4D1vjZUWu2\"]}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea264697066735822122015fd4157d14cf8d37d566d0a184dc202d275bc181e00d114df5d2906f3a2b60f64736f6c634300060c0033",
  "deployedBytecode": "0x6080604052600080fdfea264697066735822122015fd4157d14cf8d37d566d0a184dc202d275bc181e00d114df5d2906f3a2b60f64736f6c634300060c0033",
  "immutableReferences": {},
  "sourceMap": "290:5631:49:-:0;;;;;;;;;;;;;;;;;;;",
  "deployedSourceMap": "290:5631:49:-:0;;;;;",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\npragma experimental ABIEncoderV2;\n\nimport \"../BoboFactory.sol\";\nimport \"../BoboFarmer4HangingOrder.sol\";\nimport \"../BoboPair.sol\";\nimport \"../StratMaticSushi.sol\";\nimport \"../common/orderNFT.sol\";\nimport \"../common/BasicStruct.sol\";\n\ncontract BoboSwapTester {\n    // using SafeMath for uint256;\n    // address public constant USDT = 0xc2132D05D31c914a87C6611C10748AEb04B58e8F;\n    // address public constant USDC = 0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174;\n    // address public constant WMATIC = 0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270;\n    // BoboFactory public boboFactory;\n    // BoboFarmer public boboFarmer;\n    // StratMaticSushi public stratMaticSushi;\n    // OrderNFT public orderNFT;\n\n    // constructor (address _boboFactory, address _boboFarmer, address _stratMaticSushi, address _orderNFT) public {  \n    //     setAddrs(_boboFactory, _boboFarmer, _stratMaticSushi, _orderNFT);\n    // }\n\n    // function setAddrs(address _boboFactory, address _boboFarmer, address _stratMaticSushi, address _orderNFT) public {\n    //     boboFactory = BoboFactory(_boboFactory);\n    //     boboFarmer = BoboFarmer(_boboFarmer);\n    //     stratMaticSushi = StratMaticSushi(_stratMaticSushi);\n    //     orderNFT = OrderNFT(_orderNFT);\n    // }\n\n    // function approveToken() public {\n    //     address pairAddr = boboFactory.getPair(USDT, WMATIC);\n    //     ERC20(USDT).approve(pairAddr, uint256(-1));\n    //     ERC20(WMATIC).approve(pairAddr, uint256(-1));\n\n    //     pairAddr = boboFactory.getPair(USDC, WMATIC);\n    //     ERC20(USDC).approve(pairAddr, uint256(-1));\n    //     ERC20(WMATIC).approve(pairAddr, uint256(-1));\n    // }\n\n    // function addLimitedOrder(address _boboRouter, bool _bBuy, bool bUsdt, uint256 _spotPrice, uint256 _amountIn, uint256 _slippagePercent) public {\n    //     address baseToken = bUsdt ? USDT : USDC;\n    //     address pairAddr = boboFactory.getPair(baseToken, WMATIC);        \n    //     BoboPair boboPair = BoboPair(pairAddr);\n    //     (uint256 preBaseTokenAmount, uint256 preQuoteTokenAmount) = boboPair.getTotalHangingTokenAmount(address(this));\n    //     uint256 preOrderNumber = boboPair.getTotalOrderNumber(_bBuy);\n\n    //     address inToken = _bBuy ? baseToken : WMATIC;\n    //     uint256 prePendingBobo = boboFarmer.pendingBOBO(inToken, address(this));\n    //     uint256 preWantTokenAmount = boboFarmer.stakedWantTokens(inToken, address(this));\n\n    //     //boboPair.addLimitedOrder(_boboRouter, _bBuy, _spotPrice, _amountIn, _slippagePercent);\n    //     checkBoboPair(boboPair, _bBuy, _amountIn, preOrderNumber, preBaseTokenAmount, preQuoteTokenAmount);\n    //     checkBoboFarmer(_bBuy, _amountIn, inToken, prePendingBobo, preWantTokenAmount);\n    // }\n    \n    // function checkBoboPair(BoboPair boboPair, bool _bBuy, uint256 _amountIn, uint256 preOrderNumber, uint256 preBaseTokenAmount, uint256 preQuoteTokenAmount) view private {\n    //     (uint256 baseTokenAmount, uint256 quoteTokenAmount) = boboPair.getTotalHangingTokenAmount(address(this));\n    //     uint256 orderNumber = boboPair.getTotalOrderNumber(_bBuy);\n\n    //     if (_bBuy) {\n    //         require(preBaseTokenAmount.add(_amountIn) == baseTokenAmount, \"BaseTokenAmount error\");\n    //     } else {\n    //         require(preQuoteTokenAmount.add(_amountIn) == quoteTokenAmount, \"BaseTokenAmount error\");\n    //     }\n    //     require(orderNumber.sub(preOrderNumber) == 1, \"OrderNumber error\");\n    // }\n    \n    // function checkBoboFarmer(bool _bBuy, uint256 _amountIn, address inToken, uint256 prePendingBobo, uint256 preWantTokenAmount) view private {\n    //     uint256 pendingBobo = boboFarmer.pendingBOBO(inToken, address(this));   // 剩余可领取的bobo\n    //     uint256 wantTokenAmount = boboFarmer.stakedWantTokens(inToken, address(this));  //\n    //     if (_bBuy) {\n    //         require(pendingBobo == 0, \"Pending Bobo is not zero.\");\n    //         if (_amountIn > 1100000)\n    //             require(wantTokenAmount.sub(preWantTokenAmount).sub(_amountIn) >= 0, \"Want token amount error.\");\n    //     } else {\n    //         require(pendingBobo == prePendingBobo, \"Pending Bobo is not equal pre bobo.\");\n    //         require(wantTokenAmount == preWantTokenAmount, \"Want token is not equal pre want token.\");\n    //     }\n    // }\n    \n    // function pendingBobo() view public returns(uint256 usdtBobo, uint256 usdcBobo) {\n    //     usdtBobo = boboFarmer.pendingBOBO(USDT, address(this));\n    //     usdcBobo = boboFarmer.pendingBOBO(USDC, address(this));\n    // }\n\n    // function stakedWantTokens() view public returns(uint256 usdt, uint256 usdc) {\n    //     usdt = boboFarmer.stakedWantTokens(USDT, address(this));\n    //     usdc = boboFarmer.stakedWantTokens(USDC, address(this));\n    // }\n\n    // function getAllOrders(bool bUsdt) view public returns(NFTInfo[] memory orders) {\n    //     address baseToken = bUsdt ? USDT : USDC;\n    //     address pairAddr = boboFactory.getPair(baseToken, WMATIC);        \n    //     BoboPair boboPair = BoboPair(pairAddr);\n\n    //     uint256 number = boboPair.getUserHangingOrderNumber(address(this));\n    //     orders = boboPair.getUserHangingOrderInfos(address(this), 0, number);\n    // }\n\n    // function cancelOrder(uint256 _orderId) public {\n    //     address pairAddr = boboFactory.getPair(USDT, WMATIC);\n    //     BoboPair boboPair = BoboPair(pairAddr);\n    //     boboPair.cancelOrder(_orderId);\n\n    //     NFTInfo memory orderInfo = orderNFT.getOrderInfo(_orderId); \n    //     require(orderInfo.status == OrderStatus.ManualCanceled, \"Order status error\");\n    //     if (orderInfo.bBuyQuoteToken) {\n\n    //     }\n    // }\n\n    // function withdraw(address _token) public {\n    //     ERC20(_token).transfer(msg.sender, ERC20(_token).balanceOf(address(this)));\n    // }\n\n    // function earn() public {\n    //     stratMaticSushi.earn();\n    // }\n}\n",
  "sourcePath": "/Users/mryu/blockchain/bobo-metaverse/boboswap-contract/contracts/test/BoboSwapTester.sol",
  "ast": {
    "absolutePath": "project:/contracts/test/BoboSwapTester.sol",
    "exportedSymbols": {
      "BoboSwapTester": [
        27872
      ]
    },
    "id": 27873,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 27864,
        "literals": [
          "solidity",
          "^",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:23:49"
      },
      {
        "id": 27865,
        "literals": [
          "experimental",
          "ABIEncoderV2"
        ],
        "nodeType": "PragmaDirective",
        "src": "56:33:49"
      },
      {
        "absolutePath": "project:/contracts/BoboFactory.sol",
        "file": "../BoboFactory.sol",
        "id": 27866,
        "nodeType": "ImportDirective",
        "scope": 27873,
        "sourceUnit": 8861,
        "src": "91:28:49",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/BoboFarmer4HangingOrder.sol",
        "file": "../BoboFarmer4HangingOrder.sol",
        "id": 27867,
        "nodeType": "ImportDirective",
        "scope": 27873,
        "sourceUnit": 10950,
        "src": "120:40:49",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/BoboPair.sol",
        "file": "../BoboPair.sol",
        "id": 27868,
        "nodeType": "ImportDirective",
        "scope": 27873,
        "sourceUnit": 13956,
        "src": "161:25:49",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/StratMaticSushi.sol",
        "file": "../StratMaticSushi.sol",
        "id": 27869,
        "nodeType": "ImportDirective",
        "scope": 27873,
        "sourceUnit": 23105,
        "src": "187:32:49",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/common/orderNFT.sol",
        "file": "../common/orderNFT.sol",
        "id": 27870,
        "nodeType": "ImportDirective",
        "scope": 27873,
        "sourceUnit": 26997,
        "src": "220:32:49",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/common/BasicStruct.sol",
        "file": "../common/BasicStruct.sol",
        "id": 27871,
        "nodeType": "ImportDirective",
        "scope": 27873,
        "sourceUnit": 24369,
        "src": "253:35:49",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 27872,
        "linearizedBaseContracts": [
          27872
        ],
        "name": "BoboSwapTester",
        "nodeType": "ContractDefinition",
        "nodes": [],
        "scope": 27873,
        "src": "290:5631:49"
      }
    ],
    "src": "32:5890:49"
  },
  "legacyAST": {
    "attributes": {
      "absolutePath": "project:/contracts/test/BoboSwapTester.sol",
      "exportedSymbols": {
        "BoboSwapTester": [
          27872
        ]
      },
      "license": "MIT"
    },
    "children": [
      {
        "attributes": {
          "literals": [
            "solidity",
            "^",
            "0.6",
            ".0"
          ]
        },
        "id": 27864,
        "name": "PragmaDirective",
        "src": "32:23:49"
      },
      {
        "attributes": {
          "literals": [
            "experimental",
            "ABIEncoderV2"
          ]
        },
        "id": 27865,
        "name": "PragmaDirective",
        "src": "56:33:49"
      },
      {
        "attributes": {
          "SourceUnit": 8861,
          "absolutePath": "project:/contracts/BoboFactory.sol",
          "file": "../BoboFactory.sol",
          "scope": 27873,
          "symbolAliases": [
            null
          ],
          "unitAlias": ""
        },
        "id": 27866,
        "name": "ImportDirective",
        "src": "91:28:49"
      },
      {
        "attributes": {
          "SourceUnit": 10950,
          "absolutePath": "project:/contracts/BoboFarmer4HangingOrder.sol",
          "file": "../BoboFarmer4HangingOrder.sol",
          "scope": 27873,
          "symbolAliases": [
            null
          ],
          "unitAlias": ""
        },
        "id": 27867,
        "name": "ImportDirective",
        "src": "120:40:49"
      },
      {
        "attributes": {
          "SourceUnit": 13956,
          "absolutePath": "project:/contracts/BoboPair.sol",
          "file": "../BoboPair.sol",
          "scope": 27873,
          "symbolAliases": [
            null
          ],
          "unitAlias": ""
        },
        "id": 27868,
        "name": "ImportDirective",
        "src": "161:25:49"
      },
      {
        "attributes": {
          "SourceUnit": 23105,
          "absolutePath": "project:/contracts/StratMaticSushi.sol",
          "file": "../StratMaticSushi.sol",
          "scope": 27873,
          "symbolAliases": [
            null
          ],
          "unitAlias": ""
        },
        "id": 27869,
        "name": "ImportDirective",
        "src": "187:32:49"
      },
      {
        "attributes": {
          "SourceUnit": 26997,
          "absolutePath": "project:/contracts/common/orderNFT.sol",
          "file": "../common/orderNFT.sol",
          "scope": 27873,
          "symbolAliases": [
            null
          ],
          "unitAlias": ""
        },
        "id": 27870,
        "name": "ImportDirective",
        "src": "220:32:49"
      },
      {
        "attributes": {
          "SourceUnit": 24369,
          "absolutePath": "project:/contracts/common/BasicStruct.sol",
          "file": "../common/BasicStruct.sol",
          "scope": 27873,
          "symbolAliases": [
            null
          ],
          "unitAlias": ""
        },
        "id": 27871,
        "name": "ImportDirective",
        "src": "253:35:49"
      },
      {
        "attributes": {
          "abstract": false,
          "baseContracts": [
            null
          ],
          "contractDependencies": [
            null
          ],
          "contractKind": "contract",
          "documentation": null,
          "fullyImplemented": true,
          "linearizedBaseContracts": [
            27872
          ],
          "name": "BoboSwapTester",
          "nodes": [
            null
          ],
          "scope": 27873
        },
        "id": 27872,
        "name": "ContractDefinition",
        "src": "290:5631:49"
      }
    ],
    "id": 27873,
    "name": "SourceUnit",
    "src": "32:5890:49"
  },
  "compiler": {
    "name": "solc",
    "version": "0.6.12+commit.27d51765.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.3",
  "updatedAt": "2021-10-20T12:34:30.999Z",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}